'''
Copyright 2023 WizIO ( Georgi Angelov )
'''

import os, sys, time, random, json
from os.path import join, exists, normpath, dirname, basename
from shutil import copyfile
from subprocess import Popen, PIPE
from platformio import proc, fs

sys.path.append(dirname(__file__))
from wiz import ERROR,PLATFORM_NAME,FRAMEWORK_NAME,MODE_CMAKE,MODE_PYTHON,MKDIR,RMDIR

###############################################################################

PYTHON = proc.get_pythonexe_path()

VER = '0.0.0'
ver = { 'PICO_SDK_VERSION_MAJOR'   :'0',
        'PICO_SDK_VERSION_MINOR'   :'0',
        'PICO_SDK_VERSION_REVISION':'0' }

PLATFORM_DIR            = None
PLATFORM_INC_SVD_DIR    = None
FRAMEWORK_DIR           = None
FRAMEWORK_PLATFOMIO_DIR = None
FRAMEWORK_PICO_SDK_DIR  = None
ENV                     = None

###############################################################################

def get_ver(item, key):
    global ver
    if item.find('$') > -1: return
    if key in item:
        item = item.replace(')','').strip()
        if item.startswith('set('):
            ver[key] = item.split(' ')[1]

def get_pico_sdk_version():
    global VER, FRAMEWORK_PICO_SDK_DIR
    txt = open( join( FRAMEWORK_PICO_SDK_DIR, 'pico_sdk_version.cmake' ) ).read()
    txt = txt.strip().split('\n')
    for item in txt:
        get_ver(item, 'PICO_SDK_VERSION_MAJOR')
        get_ver(item, 'PICO_SDK_VERSION_MINOR')
        get_ver(item, 'PICO_SDK_VERSION_REVISION')
    VER = '%s.%s.%s' % ( ver['PICO_SDK_VERSION_MAJOR'], ver['PICO_SDK_VERSION_MINOR'], ver['PICO_SDK_VERSION_REVISION'] )
    print(' * Pico SDK Version: %s' % VER )
    return VER

def get_repo_hash(dir, url):
    res = str( random.randint(0, sys.maxsize) )
    if url:
        args = [ 'git', 'ls-remote', url , 'HEAD' ]
    else:
        args = [ 'git', 'rev-parse', 'HEAD' ]
    proc = Popen(args, stdout=PIPE, stderr=PIPE, cwd=dir)
    out, e = proc.communicate()
    if proc.returncode == 0:
        res = str(out, 'utf-8').upper().replace('\n','').replace('\t','').replace('HEAD','').strip()
    return res

def is_env(env):
    return 'SConsEnvironment' in str( type( env ) )

###############################################################################

def create_autogen():
    dir = join(FRAMEWORK_PLATFOMIO_DIR, 'boot', 'include', 'pico').replace('\\\\','/').replace('\\','/')
    MKDIR( dir )    
    filename = join(dir, 'config_autogen.h')
    if not exists(filename):
        open(filename,'w').write( "// boot-stage-2: empty" )

def create_gcc():
    dir = join(FRAMEWORK_PLATFOMIO_DIR, 'lib')
    MKDIR( dir )    

def create_version():
    global VER
    filename = join( FRAMEWORK_PICO_SDK_DIR, 'src', 'rp2_common', 'pico_platform', 'include', 'pico', 'version.h')
    if not exists( filename ):
        open( filename, 'w' ).write(
'''
/*
 * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * PlatformIO 2023 Georgi Angelov
 * https://github.com/Wiz-IO
 *
 */

// ---------------------------------------
// THIS FILE IS AUTOGENERATED; DO NOT EDIT
// ---------------------------------------

#ifndef _PICO_VERSION_H
#define _PICO_VERSION_H

#define PICO_SDK_VERSION_MAJOR      %s
#define PICO_SDK_VERSION_MINOR      %s
#define PICO_SDK_VERSION_REVISION   %s
#define PICO_SDK_VERSION_STRING     "%s < PlatformIO >"

#endif
''' % ( ver['PICO_SDK_VERSION_MAJOR'], ver['PICO_SDK_VERSION_MINOR'], ver['PICO_SDK_VERSION_REVISION'],  VER ) )

def create_include():
    R = fs.match_src_files(
        FRAMEWORK_PICO_SDK_DIR, 
        [   '-<*>',
            '+<src/**/*nclude>',
            '-<src/host>',

            '+<lib/cyw43-driver>',

            '+<lib/lwip/**/include>',
            '+<lib/lwip/**/src>',
            '-<lib/lwip/contrib>',

            '+<lib/tinyusb/src>',
            '-<lib/tinyusb/src/portable>',
            '-<lib/tinyusb/src/portable/raspberrypi>',

            # btstack ?
        ], 
        ['h', 'S']
    )

    def save_link():
        dir = join(FRAMEWORK_PLATFOMIO_DIR, 'include', dirname(name))
        MKDIR( dir, True )
        fil = basename(name)
        dst = join(dir, fil).replace('\\\\','/').replace('\\','/')
        src = join(FRAMEWORK_PICO_SDK_DIR, root).replace('\\\\','/').replace('\\','/')
        if not exists(dst):
            copyfile( src, dst )   
            F.write('#/' + root + '\n')          
        else: 
            ERROR('[INSTALL] File exists: %s' % dst) # test of the solution

    F = open(join(FRAMEWORK_PLATFOMIO_DIR, 'include.txt'), 'w')
    L =  [ '/src/', '/lib/', '/firmware/', ]
    for root in R:
        name = None
        root = root.replace('\\\\', '/').replace('\\', '/')
        if 'nclude' in root:
            name = root[ root.index('nclude') + 7:]
            save_link() 
        else:
            for l in L:
                if l in root:
                    name = root[ root.index(l) + len(l):]
                    save_link()    

###############################################################################

def create_patch():
    if not exists( FRAMEWORK_PLATFOMIO_DIR ):
        print(' * Updating current config ...')
        RMDIR( PLATFORM_INC_SVD_DIR )
        MKDIR( FRAMEWORK_PLATFOMIO_DIR )
        create_version()
        create_autogen()
        create_gcc()
        create_include()
        # SVD
    
###############################################################################

def clone_pico_sdk(url):
    print(' * Cloning pico-sdk ...')
    begin = time.time()
    args = [ 'git', 'clone', url, FRAMEWORK_PICO_SDK_DIR ] # , '--quiet'
    res = proc.exec_command( args, stdout=sys.stdout, stderr=sys.stderr, stdin=sys.stdin )
    if 0 == res['returncode']:
        print(' * Init submodules ...')
        args = ['git', 'submodule', 'init'  ] # , '--quiet'
        res = proc.exec_command( args, stdout=sys.stdout, stderr=sys.stderr, stdin=sys.stdin, cwd = FRAMEWORK_PICO_SDK_DIR )
        if 0 == res['returncode']:
            print(' * Updating submodules ...')
            args = ['git', 'submodule', 'update', FRAMEWORK_PICO_SDK_DIR ] # , '--quiet'
            res = proc.exec_command( args, stdout=sys.stdout, stderr=sys.stderr, stdin=sys.stdin, cwd = FRAMEWORK_PICO_SDK_DIR )
    if 0 != res['returncode']:
        RMDIR( FRAMEWORK_PICO_SDK_DIR )
        ERROR('[GIT] Please, try later, result = %d' % res)
    print(' * Cloning took %s seconds' % int( time.time() - begin ) ) # 66 sec

def install_python_requirements():
    try:
        import rshell
        import pylint
    except ImportError:
        print(' * Installing Python requirements')
        THIS_DIR = normpath( dirname(__file__) )
        args = [ PYTHON, '-m', 'pip', '-q', 'install', '-r', 'requirements.txt' ]
        res = proc.exec_command( args, stdout=sys.stdout, stderr=sys.stderr, stdin=sys.stdin, cwd=THIS_DIR )
        if 0 == res['returncode']:
            print(' * Requirements Done')
        else:
            ERROR('[PIP] Please, try later, result = %d' % res)

def dev_install(var, url, mode):
    global ENV
    global FRAMEWORK_DIR, FRAMEWORK_PICO_SDK_DIR, FRAMEWORK_PLATFOMIO_DIR
    global PLATFORM_DIR, PLATFORM_INC_SVD_DIR
    FRAMEWORK_DIR = ENV = var
    if str == type( FRAMEWORK_DIR ) and not exists( FRAMEWORK_DIR ):
        print(' * [WARNING] Framework folder not exists')
        return
    if is_env( ENV ): # MODE BUILD
        FRAMEWORK_DIR = ENV.PioPlatform().get_package_dir( FRAMEWORK_NAME )  # get FRAMEWORK_DIR from ENV
        PLATFORM_DIR = ENV.PioPlatform().get_dir()
        url = ENV.PioPlatform().packages[FRAMEWORK_NAME]['url-pico-sdk']
    else: # MODE INSTALL
        PLATFORM_DIR = normpath( join(FRAMEWORK_DIR, '..', '..', 'platforms', PLATFORM_NAME) )
        install_python_requirements()
    PLATFORM_INC_SVD_DIR = join( PLATFORM_DIR, 'misc', 'svd')
    ###########################################################################
    FRAMEWORK_PLATFOMIO_DIR = join( FRAMEWORK_DIR, 'platformio' )
    FRAMEWORK_PICO_SDK_DIR  = join( FRAMEWORK_DIR, 'pico-sdk' )
    if not exists( FRAMEWORK_PICO_SDK_DIR ):
        clone_pico_sdk( url )
    if mode >= MODE_CMAKE:
        create_patch() 
    if mode < MODE_PYTHON:
        get_pico_sdk_version()

###############################################################################
